pipeline {
    agent any

    parameters {
        choice(name: 'action', choices: ['apply', 'destroy'], description: 'Terraform action to perform')
    }

    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/divyamishra251/oneclickinfra.git', branch: 'main'
            }
        }

        stage('Terraform Init & Plan') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_KEY_ID'],
                    string(credentialsId: 'PEM_FILE_PATH', variable: 'PEM_FILE_PATH')
                ]) {
                    dir('terraform-postgresql-infra') {
                        sh '''
                            terraform init
                            terraform validate
                            terraform plan -var="pem_file_path=${PEM_FILE_PATH}"
                        '''
                    }
                }
            }
        }

        stage('Terraform Apply/Destroy') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_KEY_ID'],
                    string(credentialsId: 'PEM_FILE_PATH', variable: 'PEM_FILE_PATH')
                ]) {
                    dir('terraform-postgresql-infra') {
                        sh '''
                            terraform ${action} -var="pem_file_path=${PEM_FILE_PATH}" --auto-approve
                        '''
                    }
                }
            }
        }

        stage('Wait for Instances') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                echo "Waiting 30 seconds for EC2 instances to be ready..."
                sleep time: 30, unit: 'SECONDS'
            }
        }

        stage('Run Ansible Role') {
            when {
                expression { return params.action == 'apply' }
            }
            steps {
                withCredentials([
                    string(credentialsId: 'PEM_FILE_PATH', variable: 'PEM_FILE_PATH'),
                    [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_ACCESS_KEY_ID']
                ]) {
                    script {
                        env.BASTION_IP = sh(
                            script: 'cd terraform-postgresql-infra && terraform output -raw bastion_public_ip',
                            returnStdout: true
                        ).trim()
                    }

                    dir('ansiblerole') {
                        sh '''
                            export PEM_FILE_PATH=${PEM_FILE_PATH}
                            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                            export BASTION_IP=${BASTION_IP}

                            ansible-inventory -i inventory.aws_ec2.yaml --graph
                            ansible-playbook -i inventory.aws_ec2.yaml playbook.yml
                        '''
                    }
                }
            }
        }
    }
}
